window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "type_enforced", "modulename": "type_enforced", "kind": "module", "doc": "<h1 id=\"type-enforced\">Type Enforced</h1>\n\n<p><a href=\"https://badge.fury.io/py/type_enforced\"><img src=\"https://badge.fury.io/py/type_enforced.svg\" alt=\"PyPI version\" /></a>\n<a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\" /></a>\n<a href=\"https://pypi.org/project/type_enforced/\"><img src=\"https://img.shields.io/pypi/dm/type_enforced.svg?label=PyPI%20downloads\" alt=\"PyPI Downloads\" /></a></p>\n\n<p>A pure python (no special compiler required) type enforcer for type annotations. Enforce types in python functions and methods.</p>\n\n<h1 id=\"setup\">Setup</h1>\n\n<p>Make sure you have Python 3.10.x (or higher) installed on your system. You can download it <a href=\"https://www.python.org/downloads/\">here</a>.</p>\n\n<ul>\n<li>Unsupported python versions can be used, however newer features will not be available.\n<ul>\n<li>For 3.7: use type_enforced==0.0.16 (only very basic type checking is supported)</li>\n<li>For 3.8: use type_enforced==0.0.16 (only very basic type checking is supported)</li>\n<li>For 3.9: use type_enforced&lt;=1.9.0 (<code>staticmethod</code>, union with <code>|</code> and <code>from __future__ import annotations</code> typechecking are not supported)</li>\n</ul></li>\n<li>Other notes:\n<ul>\n<li>For python 3.10: <code>from __future__ import annotations</code> may cause errors (EG: when using staticmethods and classmethods)</li>\n</ul></li>\n</ul>\n\n<h3 id=\"installation\">Installation</h3>\n\n<pre><code>pip install type_enforced\n</code></pre>\n\n<h2 id=\"basic-usage\">Basic Usage</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n\n<span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span><span class=\"p\">(</span><span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<ul>\n<li>Note: <code>enabled=True</code> by default if not specified. You can set <code>enabled=False</code> to disable type checking for a specific function, method, or class. This is useful for a production vs debugging environment or for undecorating a single method in a larger wrapped class.</li>\n</ul>\n\n<h1 id=\"getting-started\">Getting Started</h1>\n\n<p><code>type_enforcer</code> contains a basic <code>Enforcer</code> wrapper that can be used to enforce many basic python typing hints. <a href=\"https://connor-makowski.github.io/type_enforced/type_enforced/enforcer.html\">Technical Docs Here</a>.</p>\n\n<p><code>type_enforcer</code> currently supports many single and multi level python types. This includes class instances and classes themselves. For example, you can force an input to be an <code>int</code>, a number <code>[int, float]</code>, an instance of the self defined <code>MyClass</code>, or a even a vector with <code>list[int]</code>. Items like <code>typing.List</code>, <code>typing.Dict</code>, <code>typing.Union</code> and <code>typing.Optional</code> are supported.</p>\n\n<p>You can pass union types to validate one of multiple types. For example, you could validate an input was an int or a float with <code>[int, float]</code>, <code>[int | float]</code> or even <code>typing.Union[int, float]</code>.</p>\n\n<p>Nesting is allowed as long as the nested items are iterables (e.g. <code>typing.List</code>, <code>dict</code>, ...). For example, you could validate that a list is a vector with <code>list[int]</code> or possibly <code>typing.List[int]</code>.</p>\n\n<p>Variables without an annotation for type are not enforced.</p>\n\n<h2 id=\"supported-type-checking-features\">Supported Type Checking Features:</h2>\n\n<ul>\n<li>Function/Method Input Typing</li>\n<li>Function/Method Return Typing</li>\n<li>Dataclass Typing</li>\n<li>All standard python types (<code>str</code>, <code>list</code>, <code>int</code>, <code>dict</code>, ...)</li>\n<li>Union types\n<ul>\n<li>typing.Union</li>\n<li><code>,</code> separated list (e.g. <code>[int, float]</code>)</li>\n<li><code>|</code> separated list (e.g. <code>[int | float]</code>)</li>\n<li><code>|</code> separated items (e.g. <code>int | float</code>)</li>\n</ul></li>\n<li>Nested types (e.g. <code>dict[str]</code> or <code>list[int, float]</code>)\n<ul>\n<li>Note: Each parent level must be an iterable\n<ul>\n<li>Specifically a variant of <code>list</code>, <code>set</code>, <code>tuple</code> or <code>dict</code></li>\n</ul></li>\n<li>Note: <code>dict</code> keys are not validated, only values</li>\n<li>Deeply nested types are supported too:\n<ul>\n<li><code>dict[dict[int]]</code></li>\n<li><code>list[set[str]]</code></li>\n</ul></li>\n</ul></li>\n<li>Many of the <code>typing</code> (package) functions and methods including:\n<ul>\n<li>Standard typing functions:\n<ul>\n<li><code>List</code>, <code>Set</code>, <code>Dict</code>, <code>Tuple</code></li>\n</ul></li>\n<li><code>Union</code></li>\n<li><code>Optional</code></li>\n<li><code>Sized</code>\n<ul>\n<li>Essentially creates a union of:\n<ul>\n<li><code>list</code>, <code>tuple</code>, <code>dict</code>, <code>set</code>, <code>str</code>, <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code>, <code>range</code></li>\n</ul></li>\n<li>Note: Can not have a nested type\n<ul>\n<li>Because this does not always meet the criteria for <code>Nested types</code> above</li>\n</ul></li>\n</ul></li>\n<li><code>Literal</code>\n<ul>\n<li>Only allow certain values to be passed. Operates slightly differently than other checks.</li>\n<li>e.g. <code>Literal['a', 'b']</code> will require any passed values that are equal (<code>==</code>) to <code>'a'</code> or <code>'b'</code>.\n<ul>\n<li>This compares the value of the passed input and not the type of the passed input.</li>\n</ul></li>\n<li>Note: Multiple types can be passed in the same <code>Literal</code>.</li>\n<li>Note: Literals are evaluated after type checking occurs.</li>\n</ul></li>\n<li><code>Callable</code>\n<ul>\n<li>Essentially creates a union of:\n<ul>\n<li><code>staticmethod</code>, <code>classmethod</code>, <code>types.FunctionType</code>, <code>types.BuiltinFunctionType</code>, <code>types.MethodType</code>, <code>types.BuiltinMethodType</code>, <code>types.GeneratorType</code></li>\n</ul></li>\n</ul></li>\n<li>Note: Other functions might have support, but there are not currently tests to validate them\n<ul>\n<li>Feel free to create an issue (or better yet a PR) if you want to add tests/support</li>\n</ul></li>\n</ul></li>\n<li><code>Constraint</code> validation.\n<ul>\n<li>This is a special type of validation that allows passed input to be validated.\n<ul>\n<li>Standard and custom constraints are supported.</li>\n</ul></li>\n<li>This is useful for validating that a passed input is within a certain range or meets a certain criteria.</li>\n<li>Note: The constraint is checked after type checking occurs.</li>\n<li>Note: See the example below or technical <a href=\"https://connor-makowski.github.io/type_enforced/type_enforced/utils.html#Constraint\">constraint</a> and <a href=\"https://connor-makowski.github.io/type_enforced/type_enforced/utils.html#GenericConstraint\">generic constraint</a> docs for more information.\n```</li>\n</ul></li>\n</ul>\n\n<h2 id=\"interactive-example\">Interactive Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_fn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_fn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_fn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;&lt;stdin&gt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/conmak/development/personal/type_enforced/type_enforced/enforcer.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__call__</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__check_type__</span><span class=\"p\">(</span><span class=\"n\">assigned_vars</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">),</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/conmak/development/personal/type_enforced/type_enforced/enforcer.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">107</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">__check_type__</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__exception__</span><span class=\"p\">(</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/conmak/development/personal/type_enforced/type_enforced/enforcer.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">__exception__</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__fn__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"si\">}</span><span class=\"s2\">): </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">my_fn</span><span class=\"p\">):</span> <span class=\"n\">Type</span> <span class=\"n\">mismatch</span> <span class=\"k\">for</span> <span class=\"n\">typed</span> <span class=\"n\">variable</span> <span class=\"err\">`</span><span class=\"n\">a</span><span class=\"err\">`</span><span class=\"o\">.</span> <span class=\"n\">Expected</span> <span class=\"n\">one</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"err\">&#39;</span><span class=\"nc\">int</span><span class=\"s1\">&#39;&gt;]` but got `&lt;class &#39;</span><span class=\"nb\">str</span><span class=\"s1\">&#39;&gt;` instead.</span>\n</code></pre>\n</div>\n\n<h2 id=\"nested-examples\">Nested Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">typing</span>\n\n<span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_fn</span><span class=\"p\">(</span>\n    <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"c1\"># Note: dict keys are not validated, only values</span>\n    <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"c1\"># Could also just use set</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">my_fn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}},</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">}])</span> <span class=\"c1\"># Success</span>\n\n<span class=\"n\">my_fn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;k&#39;</span><span class=\"p\">}},</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">}])</span> <span class=\"c1\"># Error:</span>\n<span class=\"c1\"># TypeError: (my_fn): Type mismatch for typed variable `a[i][j]`. Expected one of the following `[&lt;class &#39;int&#39;&gt;]` but got `&lt;class &#39;str&#39;&gt;` instead. </span>\n</code></pre>\n</div>\n\n<h2 id=\"class-and-method-use\">Class and Method Use</h2>\n\n<p>Type enforcer can be applied to methods individually:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">my_class</span><span class=\"p\">:</span>\n    <span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<p>You can also enforce all typing for all methods in a class by decorating the class itself.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n\n<span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span>\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">my_class</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_other_fn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n      <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<p>You can also enforce types on <code>staticmethod</code>s and <code>classmethod</code>s if you are using <code>python &gt;= 3.10</code>. If you are using a python version less than this, <code>classmethod</code>s and <code>staticmethod</code>s methods will not have their types enforced.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n\n<span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span>\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">my_class</span><span class=\"p\">:</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_other_fn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n      <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<p>Dataclasses are suported too.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">dataclasses</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">my_class</span><span class=\"p\">:</span>\n    <span class=\"n\">foo</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n</code></pre>\n</div>\n\n<p>You can skip enforcement if you add the argument <code>enabled=False</code> in the <code>Enforcer</code> call.</p>\n\n<ul>\n<li>This is useful for a production vs debugging environment.</li>\n<li>This is also useful for undecorating a single method in a larger wrapped class.</li>\n<li>Note: You can set <code>enabled=False</code> for an entire class or simply disable a specific method in a larger wrapped class.</li>\n<li>Note: Method level wrapper <code>enabled</code> values take precedence over class level wrappers.</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n<span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span>\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">my_class</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span><span class=\"p\">(</span><span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_other_fn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<h2 id=\"validate-with-constraints\">Validate with Constraints</h2>\n\n<p>Type enforcer can enforce constraints for passed variables. These constraints are validated after any type checks are made.</p>\n\n<p>To enforce basic input values are integers greater than or equal to zero, you can use the <a href=\"https://connor-makowski.github.io/type_enforced/type_enforced/utils.html#Constraint\">Constraint</a> class like so:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">type_enforced.utils</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Constraint</span>\n\n<span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span><span class=\"p\">()</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">positive_int_test</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Constraint</span><span class=\"p\">(</span><span class=\"n\">ge</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">positive_int_test</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Passes</span>\n<span class=\"n\">positive_int_test</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Fails</span>\n<span class=\"n\">positive_int_test</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"c1\"># Fails</span>\n</code></pre>\n</div>\n\n<p>To enforce a <a href=\"https://connor-makowski.github.io/type_enforced/type_enforced/utils.html#GenericConstraint\">GenericConstraint</a>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">type_enforced.utils</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">GenericConstraint</span>\n\n<span class=\"n\">CustomConstraint</span> <span class=\"o\">=</span> <span class=\"n\">GenericConstraint</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;in_rgb&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;red&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;green&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span><span class=\"p\">()</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">rgb_test</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">CustomConstraint</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">rgb_test</span><span class=\"p\">(</span><span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span> <span class=\"c1\"># Passes</span>\n<span class=\"n\">rgb_test</span><span class=\"p\">(</span><span class=\"s1\">&#39;yellow&#39;</span><span class=\"p\">)</span> <span class=\"c1\"># Fails</span>\n</code></pre>\n</div>\n\n<h2 id=\"validate-class-instances-and-classes\">Validate class instances and classes</h2>\n\n<p>Type enforcer can enforce class instances and classes. There are a few caveats between the two.</p>\n\n<p>To enforce a class instance, simply pass the class itself as a type hint:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Foo</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span>\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">my_class</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"n\">Foo</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"nb\">object</span>\n\n<span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">my_class</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">())</span> <span class=\"c1\"># Works great!</span>\n<span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">my_class</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">)</span> <span class=\"c1\"># Fails!</span>\n</code></pre>\n</div>\n\n<p>Notice how an initialized class instance <code>Foo()</code> must be passed for the enforcer to not raise an exception.</p>\n\n<p>To enforce an uninitialized class object use <code>typing.Type[classHere]</code> on the class to enforce inputs to be an uninitialized class:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">typing</span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Foo</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span>\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">my_class</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_class</span><span class=\"p\">:</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Foo</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"n\">object_class</span><span class=\"p\">()</span>\n\n<span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">my_class</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">)</span> <span class=\"c1\"># Works great!</span>\n<span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">my_class</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">())</span> <span class=\"c1\"># Fails</span>\n</code></pre>\n</div>\n\n<h2 id=\"validate-classes-with-inheritance\">Validate classes with inheritance</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">type_enforced</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">type_enforced.utils</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">WithSubclasses</span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Foo</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Baz</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@type_enforced</span><span class=\"o\">.</span><span class=\"n\">Enforcer</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"n\">custom_class</span><span class=\"p\">:</span> <span class=\"n\">WithSubclasses</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">)):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">WithSubclasses</span><span class=\"o\">.</span><span class=\"n\">get_subclasses</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">))</span> <span class=\"c1\"># Prints: [&lt;class &#39;__main__.Foo&#39;&gt;, &lt;class &#39;__main__.Bar&#39;&gt;]</span>\n<span class=\"n\">my_fn</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">())</span> <span class=\"c1\"># Passes as expected</span>\n<span class=\"n\">my_fn</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">())</span> <span class=\"c1\"># Passes as expected</span>\n<span class=\"n\">my_fn</span><span class=\"p\">(</span><span class=\"n\">Baz</span><span class=\"p\">())</span> <span class=\"c1\"># Raises TypeError as expected</span>\n</code></pre>\n</div>\n\n<h1 id=\"development\">Development</h1>\n\n<h2 id=\"running-tests-prettifying-code-and-updating-docs\">Running Tests, Prettifying Code, and Updating Docs</h2>\n\n<p>Make sure Docker is installed and running.</p>\n\n<ul>\n<li>Create a docker container and drop into a shell\n<ul>\n<li><code>./run.sh</code></li>\n</ul></li>\n<li>Run all tests (see ./utils/test.sh)\n<ul>\n<li><code>./run.sh test</code></li>\n</ul></li>\n<li>Prettify the code (see ./utils/prettify.sh)\n<ul>\n<li><code>./run.sh prettify</code></li>\n</ul></li>\n<li><p>Update the docs (see ./utils/docs.sh)</p>\n\n<ul>\n<li><code>./run.sh docs</code></li>\n</ul></li>\n<li><p>Note: You can and should modify the <code>Dockerfile</code> to test different python versions.</p></li>\n</ul>\n"}, {"fullname": "type_enforced.enforcer", "modulename": "type_enforced.enforcer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "type_enforced.enforcer.FunctionMethodEnforcer", "modulename": "type_enforced.enforcer", "qualname": "FunctionMethodEnforcer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "type_enforced.enforcer.FunctionMethodEnforcer.__init__", "modulename": "type_enforced.enforcer", "qualname": "FunctionMethodEnforcer.__init__", "kind": "function", "doc": "<p>Initialize a FunctionMethodEnforcer class object as a wrapper for a passed function <code>__fn__</code>.</p>\n\n<p>Requires:</p>\n\n<pre><code>- `__fn__`:\n    - What: The function to enforce\n    - Type: function | method | class\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">__fn__</span></span>)</span>"}, {"fullname": "type_enforced.enforcer.Enforcer", "modulename": "type_enforced.enforcer", "qualname": "Enforcer", "kind": "variable", "doc": "<p>A wrapper to enforce types within a function or method given argument annotations.</p>\n\n<p>Each wrapped item is converted into a special <code>FunctionMethodEnforcer</code> class object that validates the passed parameters for the function or method when it is called. If a function or method that is passed does not have any annotations, it is not converted into a <code>FunctionMethodEnforcer</code> class as no validation is possible.</p>\n\n<p>If wrapping a class, all methods in the class that meet any of the following criteria will be wrapped individually:</p>\n\n<ul>\n<li>Methods with <code>__call__</code></li>\n<li>Methods wrapped with <code>staticmethod</code> (if python &gt;= 3.10)</li>\n<li>Methods wrapped with <code>classmethod</code> (if python &gt;= 3.10)</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>clsFnMethod</code>:\n<ul>\n<li>What: The class, function or method that should have input types enforced</li>\n<li>Type: function | method | class</li>\n</ul></li>\n</ul>\n\n<p>Optional:</p>\n\n<ul>\n<li><code>enabled</code>:\n<ul>\n<li>What: A boolean to enable or disable the enforcer</li>\n<li>Type: bool</li>\n<li>Default: True</li>\n</ul></li>\n</ul>\n\n<p>Example Use:</p>\n\n<pre><code>&gt;&gt;&gt; import type_enforced\n&gt;&gt;&gt; @type_enforced.Enforcer\n... def my_fn(a: int , b: [int, str] =2, c: int =3) -&gt; None:\n...     pass\n...\n&gt;&gt;&gt; my_fn(a=1, b=2, c=3)\n&gt;&gt;&gt; my_fn(a=1, b='2', c=3)\n&gt;&gt;&gt; my_fn(a='a', b=2, c=3)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/home/conmak/development/personal/type_enforced/type_enforced/enforcer.py\", line 85, in __call__\n    self.__check_type__(assigned_vars.get(key), value, key)\n  File \"/home/conmak/development/personal/type_enforced/type_enforced/enforcer.py\", line 107, in __check_type__\n    self.__exception__(\n  File \"/home/conmak/development/personal/type_enforced/type_enforced/enforcer.py\", line 34, in __exception__\n    raise Exception(f\"({self.__fn__.__qualname__}): {message}\")\nException: (my_fn): Type mismatch for typed variable `a`. Expected one of the following `[&lt;class 'int'&gt;]` but got `&lt;class 'str'&gt;` instead.\n</code></pre>\n", "default_value": "&lt;Partial type_enforced.enforcer.Enforcer object&gt;"}, {"fullname": "type_enforced.utils", "modulename": "type_enforced.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "type_enforced.utils.Partial", "modulename": "type_enforced.utils", "qualname": "Partial", "kind": "class", "doc": "<p>A special class wrapper to allow for easy partial function wrappings and calls.</p>\n"}, {"fullname": "type_enforced.utils.Partial.__init__", "modulename": "type_enforced.utils", "qualname": "Partial.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">__fn__</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">__args__</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">__kwargs__</span></span>)</span>"}, {"fullname": "type_enforced.utils.GenericConstraint", "modulename": "type_enforced.utils", "qualname": "GenericConstraint", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "type_enforced.utils.GenericConstraint.__init__", "modulename": "type_enforced.utils", "qualname": "GenericConstraint.__init__", "kind": "function", "doc": "<p>Creates a generic constraint object that can be used to validate a value against a set of constraints.</p>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>constraints</code>:\n<ul>\n<li>What: A dictionary of constraint names and their associated functions.</li>\n<li>Type: dict</li>\n<li>Note: All values in the dictionary must be functions that take a single argument and return a boolean.</li>\n<li>Note: The dictionary keys will be used to identify the failed constraints in the error messages.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">constraints</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "type_enforced.utils.Constraint", "modulename": "type_enforced.utils", "qualname": "Constraint", "kind": "class", "doc": "<p></p>\n", "bases": "GenericConstraint"}, {"fullname": "type_enforced.utils.Constraint.__init__", "modulename": "type_enforced.utils", "qualname": "Constraint.__init__", "kind": "function", "doc": "<p>Creates a constraint object that can be used to validate a value against a set of constraints.</p>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>pattern</code>:\n<ul>\n<li>What: A regex pattern that the value must match.</li>\n<li>Type: str or None</li>\n<li>Default: None</li>\n</ul></li>\n<li><code>includes</code>:\n<ul>\n<li>What: A list of values that the value must be in.</li>\n<li>Type: list, tuple, set or None</li>\n<li>Default: None</li>\n</ul></li>\n<li><code>excludes</code>:\n<ul>\n<li>What: A list of values that the value must not be in.</li>\n<li>Type: list, tuple, set or None</li>\n<li>Default: None</li>\n</ul></li>\n<li><code>gt</code>:\n<ul>\n<li>What: The value must be greater than this value.</li>\n<li>Type: float, int or None</li>\n<li>Default: None</li>\n</ul></li>\n<li><code>lt</code>:\n<ul>\n<li>What: The value must be less than this value.</li>\n<li>Type: float, int or None</li>\n<li>Default: None</li>\n</ul></li>\n<li><code>ge</code>:\n<ul>\n<li>What: The value must be greater than or equal to this value.</li>\n<li>Type: float, int or None</li>\n<li>Default: None</li>\n</ul></li>\n<li><code>le</code>:\n<ul>\n<li>What: The value must be less than or equal to this value.</li>\n<li>Type: float, int or None</li>\n<li>Default: None</li>\n</ul></li>\n<li><code>eq</code>:\n<ul>\n<li>What: The value must be equal to this value.</li>\n<li>Type: float, int or None</li>\n<li>Default: None</li>\n</ul></li>\n<li><code>ne</code>:\n<ul>\n<li>What: The value must not be equal to this value.</li>\n<li>Type: float, int or None</li>\n<li>Default: None</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">includes</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"nb\">set</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">excludes</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"nb\">set</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gt</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lt</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ge</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">le</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">eq</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ne</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "type_enforced.utils.WithSubclasses", "modulename": "type_enforced.utils", "qualname": "WithSubclasses", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "type_enforced.utils.WithSubclasses.__init__", "modulename": "type_enforced.utils", "qualname": "WithSubclasses.__init__", "kind": "function", "doc": "<p>A special helper class to allow a class type to be passed and also allow all subclasses of that type.</p>\n\n<p>This allows delayed evaluation of the subclasses until initial call time such that delayed inherited classes are considered.</p>\n\n<p>Note: You can not validate that a passed object is a WithSubclasses object as this is a special case.</p>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>obj</code>:\n<ul>\n<li>What: An uninitialized class that should also be considered type correct if a subclass is passed.</li>\n<li>Type: Any Uninitialized class</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>cache</code>:\n<ul>\n<li>What: Whether to cache the calcuation of the subclasses. If set to False, this will recalculate the subclasses on each call.</li>\n<li>Type: bool</li>\n<li>Default: True</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "type_enforced.utils.WithSubclasses.obj", "modulename": "type_enforced.utils", "qualname": "WithSubclasses.obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "type_enforced.utils.WithSubclasses.cache", "modulename": "type_enforced.utils", "qualname": "WithSubclasses.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "type_enforced.utils.WithSubclasses.get_subclasses", "modulename": "type_enforced.utils", "qualname": "WithSubclasses.get_subclasses", "kind": "function", "doc": "<p>Returns a list of all of the subclasses of the class that was passed to the WithSubclasses object.</p>\n\n<p>If already calculated, it will return the cached value.</p>\n\n<p>Returns:</p>\n\n<ul>\n<li><code>subclasses</code>:\n<ul>\n<li>What: A list of all of the subclasses of the class that was passed to the WithSubclasses object.</li>\n<li>Type: list of strs</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "type_enforced.utils.DeepMerge", "modulename": "type_enforced.utils", "qualname": "DeepMerge", "kind": "function", "doc": "<p>Merge two dictionaries together, recursively merging any nested dictionaries and extending any nested lists.</p>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>original</code>:\n<ul>\n<li>What: The original dictionary to merge the update into.</li>\n<li>Type: dict</li>\n</ul></li>\n<li><code>update</code>:\n<ul>\n<li>What: The dictionary to merge into the original dictionary.</li>\n<li>Type: dict</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">original</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">update</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();